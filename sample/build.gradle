apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String
    defaultConfig {
        applicationId "com.putao.ptx.ptui"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME as String
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    task copyApks(type: Copy, dependsOn: build) {
        delete "${rootProject.buildDir}/v${defaultConfig.versionName}/"
        from "${project.buildDir}/outputs/apk/"
        include {
            apk -> apk.file.name.contains('PTCustomWidgetLib')
        }
        into "${rootProject.buildDir}/v${defaultConfig.versionName}/"
    }

    applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        if (variant.flavorName == 'innerTest' && variant.buildType.name == 'release') {
                            def newFileName = 'PTCustomWidgetLib-innerTest.apk'
                            output.outputFile = new File(outputFile.parent, newFileName)
                        }
                        if (variant.flavorName == 'online' && variant.buildType.name == 'release') {
                            def newFileName = 'PTCustomWidgetLib-online.apk'
                            output.outputFile = new File(outputFile.parent, newFileName)
                        }
                        if (variant.flavorName == 'dev' && variant.buildType.name == 'release') {
                            def newFileName = 'PTCustomWidgetLib-dev.apk'
                            output.outputFile = new File(outputFile.parent, newFileName)
                        }
                    }
            }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile rootProject.ext.appcompat_v7
    compile rootProject.ext.recyclerview
    compile rootProject.ext.cardview
    compile project(':ptuilib')
    testCompile 'junit:junit:4.12'
//    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile "com.jakewharton:butterknife:8.7.0"
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'


    // Anko Commons
    compile "org.jetbrains.anko:anko-commons:$anko_version"

    // Anko Layouts
//    compile "org.jetbrains.anko:anko-sdk25:$anko_version" // sdk15, sdk19, sdk21, sdk23 are also available
//    compile "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
//    compile 'com.android.support:design:25.3.1'

}
